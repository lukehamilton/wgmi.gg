
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  address: string
}

/**
 * Model Project
 * 
 */
export type Project = {
  submitterId: number
  id: number
  name: string
  slug: string
  website: string | null
  twitter: string | null
  discord: string | null
  opensea: string | null
  metadata: Prisma.JsonValue | null
}

/**
 * Model Strategy
 * 
 */
export type Strategy = {
  id: number
  contract: string
  name: string
}

/**
 * Model Asset
 * 
 */
export type Asset = {
  id: number
  quantity: number
  verificationId: number | null
  strategyId: number
}

/**
 * Model Verification
 * 
 */
export type Verification = {
  projectId: number
  verifierId: number
  id: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<GlobalReject>;

  /**
   * `prisma.strategy`: Exposes CRUD operations for the **Strategy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Strategies
    * const strategies = await prisma.strategy.findMany()
    * ```
    */
  get strategy(): Prisma.StrategyDelegate<GlobalReject>;

  /**
   * `prisma.asset`: Exposes CRUD operations for the **Asset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assets
    * const assets = await prisma.asset.findMany()
    * ```
    */
  get asset(): Prisma.AssetDelegate<GlobalReject>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.10.0
   * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Project: 'Project',
    Strategy: 'Strategy',
    Asset: 'Asset',
    Verification: 'Verification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Project: number
    Verification: number
  }

  export type UserCountOutputTypeSelect = {
    Project?: boolean
    Verification?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ProjectCountOutputType
   */


  export type ProjectCountOutputType = {
    Verification: number
  }

  export type ProjectCountOutputTypeSelect = {
    Verification?: boolean
  }

  export type ProjectCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProjectCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProjectCountOutputType
    : S extends undefined
    ? never
    : S extends ProjectCountOutputTypeArgs
    ?'include' extends U
    ? ProjectCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProjectCountOutputType ? ProjectCountOutputType[P] : never
  } 
    : ProjectCountOutputType
  : ProjectCountOutputType




  // Custom InputTypes

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     * 
    **/
    select?: ProjectCountOutputTypeSelect | null
  }



  /**
   * Count Type StrategyCountOutputType
   */


  export type StrategyCountOutputType = {
    Asset: number
  }

  export type StrategyCountOutputTypeSelect = {
    Asset?: boolean
  }

  export type StrategyCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StrategyCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StrategyCountOutputType
    : S extends undefined
    ? never
    : S extends StrategyCountOutputTypeArgs
    ?'include' extends U
    ? StrategyCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StrategyCountOutputType ? StrategyCountOutputType[P] : never
  } 
    : StrategyCountOutputType
  : StrategyCountOutputType




  // Custom InputTypes

  /**
   * StrategyCountOutputType without action
   */
  export type StrategyCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StrategyCountOutputType
     * 
    **/
    select?: StrategyCountOutputTypeSelect | null
  }



  /**
   * Count Type VerificationCountOutputType
   */


  export type VerificationCountOutputType = {
    assets: number
  }

  export type VerificationCountOutputTypeSelect = {
    assets?: boolean
  }

  export type VerificationCountOutputTypeGetPayload<
    S extends boolean | null | undefined | VerificationCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? VerificationCountOutputType
    : S extends undefined
    ? never
    : S extends VerificationCountOutputTypeArgs
    ?'include' extends U
    ? VerificationCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof VerificationCountOutputType ? VerificationCountOutputType[P] : never
  } 
    : VerificationCountOutputType
  : VerificationCountOutputType




  // Custom InputTypes

  /**
   * VerificationCountOutputType without action
   */
  export type VerificationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the VerificationCountOutputType
     * 
    **/
    select?: VerificationCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    address: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    address: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    address: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    address?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    address?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    address?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    address: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    address?: boolean
    Project?: boolean | ProjectFindManyArgs
    Verification?: boolean | VerificationFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    Project?: boolean | ProjectFindManyArgs
    Verification?: boolean | VerificationFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Project' ? Array < ProjectGetPayload<S['include'][P]>>  :
        P extends 'Verification' ? Array < VerificationGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Project' ? Array < ProjectGetPayload<S['select'][P]>>  :
        P extends 'Verification' ? Array < VerificationGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Project<T extends ProjectFindManyArgs = {}>(args?: Subset<T, ProjectFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Project>>, PrismaPromise<Array<ProjectGetPayload<T>>>>;

    Verification<T extends VerificationFindManyArgs = {}>(args?: Subset<T, VerificationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Verification>>, PrismaPromise<Array<VerificationGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Project
   */


  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    submitterId: number | null
    id: number | null
  }

  export type ProjectSumAggregateOutputType = {
    submitterId: number | null
    id: number | null
  }

  export type ProjectMinAggregateOutputType = {
    submitterId: number | null
    id: number | null
    name: string | null
    slug: string | null
    website: string | null
    twitter: string | null
    discord: string | null
    opensea: string | null
  }

  export type ProjectMaxAggregateOutputType = {
    submitterId: number | null
    id: number | null
    name: string | null
    slug: string | null
    website: string | null
    twitter: string | null
    discord: string | null
    opensea: string | null
  }

  export type ProjectCountAggregateOutputType = {
    submitterId: number
    id: number
    name: number
    slug: number
    website: number
    twitter: number
    discord: number
    opensea: number
    metadata: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    submitterId?: true
    id?: true
  }

  export type ProjectSumAggregateInputType = {
    submitterId?: true
    id?: true
  }

  export type ProjectMinAggregateInputType = {
    submitterId?: true
    id?: true
    name?: true
    slug?: true
    website?: true
    twitter?: true
    discord?: true
    opensea?: true
  }

  export type ProjectMaxAggregateInputType = {
    submitterId?: true
    id?: true
    name?: true
    slug?: true
    website?: true
    twitter?: true
    discord?: true
    opensea?: true
  }

  export type ProjectCountAggregateInputType = {
    submitterId?: true
    id?: true
    name?: true
    slug?: true
    website?: true
    twitter?: true
    discord?: true
    opensea?: true
    metadata?: true
    _all?: true
  }

  export type ProjectAggregateArgs = {
    /**
     * Filter which Project to aggregate.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs = {
    where?: ProjectWhereInput
    orderBy?: Enumerable<ProjectOrderByWithAggregationInput>
    by: Array<ProjectScalarFieldEnum>
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }


  export type ProjectGroupByOutputType = {
    submitterId: number
    id: number
    name: string
    slug: string
    website: string | null
    twitter: string | null
    discord: string | null
    opensea: string | null
    metadata: JsonValue | null
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect = {
    submitterId?: boolean
    id?: boolean
    name?: boolean
    slug?: boolean
    submitter?: boolean | UserArgs
    website?: boolean
    twitter?: boolean
    discord?: boolean
    opensea?: boolean
    metadata?: boolean
    Verification?: boolean | VerificationFindManyArgs
    _count?: boolean | ProjectCountOutputTypeArgs
  }

  export type ProjectInclude = {
    submitter?: boolean | UserArgs
    Verification?: boolean | VerificationFindManyArgs
    _count?: boolean | ProjectCountOutputTypeArgs
  }

  export type ProjectGetPayload<
    S extends boolean | null | undefined | ProjectArgs,
    U = keyof S
      > = S extends true
        ? Project
    : S extends undefined
    ? never
    : S extends ProjectArgs | ProjectFindManyArgs
    ?'include' extends U
    ? Project  & {
    [P in TrueKeys<S['include']>]:
        P extends 'submitter' ? UserGetPayload<S['include'][P]> :
        P extends 'Verification' ? Array < VerificationGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProjectCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'submitter' ? UserGetPayload<S['select'][P]> :
        P extends 'Verification' ? Array < VerificationGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProjectCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Project ? Project[P] : never
  } 
    : Project
  : Project


  type ProjectCountArgs = Merge<
    Omit<ProjectFindManyArgs, 'select' | 'include'> & {
      select?: ProjectCountAggregateInputType | true
    }
  >

  export interface ProjectDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjectFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Project'> extends True ? CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>> : CheckSelect<T, Prisma__ProjectClient<Project | null >, Prisma__ProjectClient<ProjectGetPayload<T> | null >>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjectFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Project'> extends True ? CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>> : CheckSelect<T, Prisma__ProjectClient<Project | null >, Prisma__ProjectClient<ProjectGetPayload<T> | null >>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `submitterId`
     * const projectWithSubmitterIdOnly = await prisma.project.findMany({ select: { submitterId: true } })
     * 
    **/
    findMany<T extends ProjectFindManyArgs>(
      args?: SelectSubset<T, ProjectFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Project>>, PrismaPromise<Array<ProjectGetPayload<T>>>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs>(
      args: SelectSubset<T, ProjectCreateArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Create many Projects.
     *     @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     *     @example
     *     // Create many Projects
     *     const project = await prisma.project.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectCreateManyArgs>(
      args?: SelectSubset<T, ProjectCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs>(
      args: SelectSubset<T, ProjectDeleteArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs>(
      args: SelectSubset<T, ProjectUpdateArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs>(
      args?: SelectSubset<T, ProjectDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs>(
      args: SelectSubset<T, ProjectUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs>(
      args: SelectSubset<T, ProjectUpsertArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    submitter<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    Verification<T extends VerificationFindManyArgs = {}>(args?: Subset<T, VerificationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Verification>>, PrismaPromise<Array<VerificationGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Throw an Error if a Project can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Project to fetch.
     * 
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Throw an Error if a Project can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Project to fetch.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     * 
    **/
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project findMany
   */
  export type ProjectFindManyArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Projects to fetch.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project create
   */
  export type ProjectCreateArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * The data needed to create a Project.
     * 
    **/
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }


  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs = {
    /**
     * The data used to create many Projects.
     * 
    **/
    data: Enumerable<ProjectCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Project update
   */
  export type ProjectUpdateArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * The data needed to update a Project.
     * 
    **/
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     * 
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs = {
    /**
     * The data used to update Projects.
     * 
    **/
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     * 
    **/
    where?: ProjectWhereInput
  }


  /**
   * Project upsert
   */
  export type ProjectUpsertArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * The filter to search for the Project to update in case it exists.
     * 
    **/
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     * 
    **/
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }


  /**
   * Project delete
   */
  export type ProjectDeleteArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter which Project to delete.
     * 
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs = {
    /**
     * Filter which Projects to delete
     * 
    **/
    where?: ProjectWhereInput
  }


  /**
   * Project without action
   */
  export type ProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
  }



  /**
   * Model Strategy
   */


  export type AggregateStrategy = {
    _count: StrategyCountAggregateOutputType | null
    _avg: StrategyAvgAggregateOutputType | null
    _sum: StrategySumAggregateOutputType | null
    _min: StrategyMinAggregateOutputType | null
    _max: StrategyMaxAggregateOutputType | null
  }

  export type StrategyAvgAggregateOutputType = {
    id: number | null
  }

  export type StrategySumAggregateOutputType = {
    id: number | null
  }

  export type StrategyMinAggregateOutputType = {
    id: number | null
    contract: string | null
    name: string | null
  }

  export type StrategyMaxAggregateOutputType = {
    id: number | null
    contract: string | null
    name: string | null
  }

  export type StrategyCountAggregateOutputType = {
    id: number
    contract: number
    name: number
    _all: number
  }


  export type StrategyAvgAggregateInputType = {
    id?: true
  }

  export type StrategySumAggregateInputType = {
    id?: true
  }

  export type StrategyMinAggregateInputType = {
    id?: true
    contract?: true
    name?: true
  }

  export type StrategyMaxAggregateInputType = {
    id?: true
    contract?: true
    name?: true
  }

  export type StrategyCountAggregateInputType = {
    id?: true
    contract?: true
    name?: true
    _all?: true
  }

  export type StrategyAggregateArgs = {
    /**
     * Filter which Strategy to aggregate.
     * 
    **/
    where?: StrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Strategies to fetch.
     * 
    **/
    orderBy?: Enumerable<StrategyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Strategies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Strategies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Strategies
    **/
    _count?: true | StrategyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StrategyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StrategySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StrategyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StrategyMaxAggregateInputType
  }

  export type GetStrategyAggregateType<T extends StrategyAggregateArgs> = {
        [P in keyof T & keyof AggregateStrategy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStrategy[P]>
      : GetScalarType<T[P], AggregateStrategy[P]>
  }




  export type StrategyGroupByArgs = {
    where?: StrategyWhereInput
    orderBy?: Enumerable<StrategyOrderByWithAggregationInput>
    by: Array<StrategyScalarFieldEnum>
    having?: StrategyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StrategyCountAggregateInputType | true
    _avg?: StrategyAvgAggregateInputType
    _sum?: StrategySumAggregateInputType
    _min?: StrategyMinAggregateInputType
    _max?: StrategyMaxAggregateInputType
  }


  export type StrategyGroupByOutputType = {
    id: number
    contract: string
    name: string
    _count: StrategyCountAggregateOutputType | null
    _avg: StrategyAvgAggregateOutputType | null
    _sum: StrategySumAggregateOutputType | null
    _min: StrategyMinAggregateOutputType | null
    _max: StrategyMaxAggregateOutputType | null
  }

  type GetStrategyGroupByPayload<T extends StrategyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StrategyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StrategyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StrategyGroupByOutputType[P]>
            : GetScalarType<T[P], StrategyGroupByOutputType[P]>
        }
      >
    >


  export type StrategySelect = {
    id?: boolean
    contract?: boolean
    name?: boolean
    Asset?: boolean | AssetFindManyArgs
    _count?: boolean | StrategyCountOutputTypeArgs
  }

  export type StrategyInclude = {
    Asset?: boolean | AssetFindManyArgs
    _count?: boolean | StrategyCountOutputTypeArgs
  }

  export type StrategyGetPayload<
    S extends boolean | null | undefined | StrategyArgs,
    U = keyof S
      > = S extends true
        ? Strategy
    : S extends undefined
    ? never
    : S extends StrategyArgs | StrategyFindManyArgs
    ?'include' extends U
    ? Strategy  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Asset' ? Array < AssetGetPayload<S['include'][P]>>  :
        P extends '_count' ? StrategyCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Asset' ? Array < AssetGetPayload<S['select'][P]>>  :
        P extends '_count' ? StrategyCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Strategy ? Strategy[P] : never
  } 
    : Strategy
  : Strategy


  type StrategyCountArgs = Merge<
    Omit<StrategyFindManyArgs, 'select' | 'include'> & {
      select?: StrategyCountAggregateInputType | true
    }
  >

  export interface StrategyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Strategy that matches the filter.
     * @param {StrategyFindUniqueArgs} args - Arguments to find a Strategy
     * @example
     * // Get one Strategy
     * const strategy = await prisma.strategy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StrategyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StrategyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Strategy'> extends True ? CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>> : CheckSelect<T, Prisma__StrategyClient<Strategy | null >, Prisma__StrategyClient<StrategyGetPayload<T> | null >>

    /**
     * Find the first Strategy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyFindFirstArgs} args - Arguments to find a Strategy
     * @example
     * // Get one Strategy
     * const strategy = await prisma.strategy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StrategyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StrategyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Strategy'> extends True ? CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>> : CheckSelect<T, Prisma__StrategyClient<Strategy | null >, Prisma__StrategyClient<StrategyGetPayload<T> | null >>

    /**
     * Find zero or more Strategies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Strategies
     * const strategies = await prisma.strategy.findMany()
     * 
     * // Get first 10 Strategies
     * const strategies = await prisma.strategy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const strategyWithIdOnly = await prisma.strategy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StrategyFindManyArgs>(
      args?: SelectSubset<T, StrategyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Strategy>>, PrismaPromise<Array<StrategyGetPayload<T>>>>

    /**
     * Create a Strategy.
     * @param {StrategyCreateArgs} args - Arguments to create a Strategy.
     * @example
     * // Create one Strategy
     * const Strategy = await prisma.strategy.create({
     *   data: {
     *     // ... data to create a Strategy
     *   }
     * })
     * 
    **/
    create<T extends StrategyCreateArgs>(
      args: SelectSubset<T, StrategyCreateArgs>
    ): CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>>

    /**
     * Create many Strategies.
     *     @param {StrategyCreateManyArgs} args - Arguments to create many Strategies.
     *     @example
     *     // Create many Strategies
     *     const strategy = await prisma.strategy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StrategyCreateManyArgs>(
      args?: SelectSubset<T, StrategyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Strategy.
     * @param {StrategyDeleteArgs} args - Arguments to delete one Strategy.
     * @example
     * // Delete one Strategy
     * const Strategy = await prisma.strategy.delete({
     *   where: {
     *     // ... filter to delete one Strategy
     *   }
     * })
     * 
    **/
    delete<T extends StrategyDeleteArgs>(
      args: SelectSubset<T, StrategyDeleteArgs>
    ): CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>>

    /**
     * Update one Strategy.
     * @param {StrategyUpdateArgs} args - Arguments to update one Strategy.
     * @example
     * // Update one Strategy
     * const strategy = await prisma.strategy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StrategyUpdateArgs>(
      args: SelectSubset<T, StrategyUpdateArgs>
    ): CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>>

    /**
     * Delete zero or more Strategies.
     * @param {StrategyDeleteManyArgs} args - Arguments to filter Strategies to delete.
     * @example
     * // Delete a few Strategies
     * const { count } = await prisma.strategy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StrategyDeleteManyArgs>(
      args?: SelectSubset<T, StrategyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Strategies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Strategies
     * const strategy = await prisma.strategy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StrategyUpdateManyArgs>(
      args: SelectSubset<T, StrategyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Strategy.
     * @param {StrategyUpsertArgs} args - Arguments to update or create a Strategy.
     * @example
     * // Update or create a Strategy
     * const strategy = await prisma.strategy.upsert({
     *   create: {
     *     // ... data to create a Strategy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Strategy we want to update
     *   }
     * })
    **/
    upsert<T extends StrategyUpsertArgs>(
      args: SelectSubset<T, StrategyUpsertArgs>
    ): CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>>

    /**
     * Count the number of Strategies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyCountArgs} args - Arguments to filter Strategies to count.
     * @example
     * // Count the number of Strategies
     * const count = await prisma.strategy.count({
     *   where: {
     *     // ... the filter for the Strategies we want to count
     *   }
     * })
    **/
    count<T extends StrategyCountArgs>(
      args?: Subset<T, StrategyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StrategyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Strategy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StrategyAggregateArgs>(args: Subset<T, StrategyAggregateArgs>): PrismaPromise<GetStrategyAggregateType<T>>

    /**
     * Group by Strategy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StrategyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StrategyGroupByArgs['orderBy'] }
        : { orderBy?: StrategyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StrategyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStrategyGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Strategy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StrategyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Asset<T extends AssetFindManyArgs = {}>(args?: Subset<T, AssetFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Asset>>, PrismaPromise<Array<AssetGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Strategy findUnique
   */
  export type StrategyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * Throw an Error if a Strategy can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Strategy to fetch.
     * 
    **/
    where: StrategyWhereUniqueInput
  }


  /**
   * Strategy findFirst
   */
  export type StrategyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * Throw an Error if a Strategy can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Strategy to fetch.
     * 
    **/
    where?: StrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Strategies to fetch.
     * 
    **/
    orderBy?: Enumerable<StrategyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Strategies.
     * 
    **/
    cursor?: StrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Strategies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Strategies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Strategies.
     * 
    **/
    distinct?: Enumerable<StrategyScalarFieldEnum>
  }


  /**
   * Strategy findMany
   */
  export type StrategyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * Filter, which Strategies to fetch.
     * 
    **/
    where?: StrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Strategies to fetch.
     * 
    **/
    orderBy?: Enumerable<StrategyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Strategies.
     * 
    **/
    cursor?: StrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Strategies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Strategies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StrategyScalarFieldEnum>
  }


  /**
   * Strategy create
   */
  export type StrategyCreateArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * The data needed to create a Strategy.
     * 
    **/
    data: XOR<StrategyCreateInput, StrategyUncheckedCreateInput>
  }


  /**
   * Strategy createMany
   */
  export type StrategyCreateManyArgs = {
    /**
     * The data used to create many Strategies.
     * 
    **/
    data: Enumerable<StrategyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Strategy update
   */
  export type StrategyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * The data needed to update a Strategy.
     * 
    **/
    data: XOR<StrategyUpdateInput, StrategyUncheckedUpdateInput>
    /**
     * Choose, which Strategy to update.
     * 
    **/
    where: StrategyWhereUniqueInput
  }


  /**
   * Strategy updateMany
   */
  export type StrategyUpdateManyArgs = {
    /**
     * The data used to update Strategies.
     * 
    **/
    data: XOR<StrategyUpdateManyMutationInput, StrategyUncheckedUpdateManyInput>
    /**
     * Filter which Strategies to update
     * 
    **/
    where?: StrategyWhereInput
  }


  /**
   * Strategy upsert
   */
  export type StrategyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * The filter to search for the Strategy to update in case it exists.
     * 
    **/
    where: StrategyWhereUniqueInput
    /**
     * In case the Strategy found by the `where` argument doesn't exist, create a new Strategy with this data.
     * 
    **/
    create: XOR<StrategyCreateInput, StrategyUncheckedCreateInput>
    /**
     * In case the Strategy was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StrategyUpdateInput, StrategyUncheckedUpdateInput>
  }


  /**
   * Strategy delete
   */
  export type StrategyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * Filter which Strategy to delete.
     * 
    **/
    where: StrategyWhereUniqueInput
  }


  /**
   * Strategy deleteMany
   */
  export type StrategyDeleteManyArgs = {
    /**
     * Filter which Strategies to delete
     * 
    **/
    where?: StrategyWhereInput
  }


  /**
   * Strategy without action
   */
  export type StrategyArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
  }



  /**
   * Model Asset
   */


  export type AggregateAsset = {
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  export type AssetAvgAggregateOutputType = {
    id: number | null
    quantity: number | null
    verificationId: number | null
    strategyId: number | null
  }

  export type AssetSumAggregateOutputType = {
    id: number | null
    quantity: number | null
    verificationId: number | null
    strategyId: number | null
  }

  export type AssetMinAggregateOutputType = {
    id: number | null
    quantity: number | null
    verificationId: number | null
    strategyId: number | null
  }

  export type AssetMaxAggregateOutputType = {
    id: number | null
    quantity: number | null
    verificationId: number | null
    strategyId: number | null
  }

  export type AssetCountAggregateOutputType = {
    id: number
    quantity: number
    verificationId: number
    strategyId: number
    _all: number
  }


  export type AssetAvgAggregateInputType = {
    id?: true
    quantity?: true
    verificationId?: true
    strategyId?: true
  }

  export type AssetSumAggregateInputType = {
    id?: true
    quantity?: true
    verificationId?: true
    strategyId?: true
  }

  export type AssetMinAggregateInputType = {
    id?: true
    quantity?: true
    verificationId?: true
    strategyId?: true
  }

  export type AssetMaxAggregateInputType = {
    id?: true
    quantity?: true
    verificationId?: true
    strategyId?: true
  }

  export type AssetCountAggregateInputType = {
    id?: true
    quantity?: true
    verificationId?: true
    strategyId?: true
    _all?: true
  }

  export type AssetAggregateArgs = {
    /**
     * Filter which Asset to aggregate.
     * 
    **/
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     * 
    **/
    orderBy?: Enumerable<AssetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assets
    **/
    _count?: true | AssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetMaxAggregateInputType
  }

  export type GetAssetAggregateType<T extends AssetAggregateArgs> = {
        [P in keyof T & keyof AggregateAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsset[P]>
      : GetScalarType<T[P], AggregateAsset[P]>
  }




  export type AssetGroupByArgs = {
    where?: AssetWhereInput
    orderBy?: Enumerable<AssetOrderByWithAggregationInput>
    by: Array<AssetScalarFieldEnum>
    having?: AssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetCountAggregateInputType | true
    _avg?: AssetAvgAggregateInputType
    _sum?: AssetSumAggregateInputType
    _min?: AssetMinAggregateInputType
    _max?: AssetMaxAggregateInputType
  }


  export type AssetGroupByOutputType = {
    id: number
    quantity: number
    verificationId: number | null
    strategyId: number
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  type GetAssetGroupByPayload<T extends AssetGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetGroupByOutputType[P]>
            : GetScalarType<T[P], AssetGroupByOutputType[P]>
        }
      >
    >


  export type AssetSelect = {
    id?: boolean
    quantity?: boolean
    strategy?: boolean | StrategyArgs
    Verification?: boolean | VerificationArgs
    verificationId?: boolean
    strategyId?: boolean
  }

  export type AssetInclude = {
    strategy?: boolean | StrategyArgs
    Verification?: boolean | VerificationArgs
  }

  export type AssetGetPayload<
    S extends boolean | null | undefined | AssetArgs,
    U = keyof S
      > = S extends true
        ? Asset
    : S extends undefined
    ? never
    : S extends AssetArgs | AssetFindManyArgs
    ?'include' extends U
    ? Asset  & {
    [P in TrueKeys<S['include']>]:
        P extends 'strategy' ? StrategyGetPayload<S['include'][P]> :
        P extends 'Verification' ? VerificationGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'strategy' ? StrategyGetPayload<S['select'][P]> :
        P extends 'Verification' ? VerificationGetPayload<S['select'][P]> | null :  P extends keyof Asset ? Asset[P] : never
  } 
    : Asset
  : Asset


  type AssetCountArgs = Merge<
    Omit<AssetFindManyArgs, 'select' | 'include'> & {
      select?: AssetCountAggregateInputType | true
    }
  >

  export interface AssetDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Asset that matches the filter.
     * @param {AssetFindUniqueArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AssetFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AssetFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Asset'> extends True ? CheckSelect<T, Prisma__AssetClient<Asset>, Prisma__AssetClient<AssetGetPayload<T>>> : CheckSelect<T, Prisma__AssetClient<Asset | null >, Prisma__AssetClient<AssetGetPayload<T> | null >>

    /**
     * Find the first Asset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AssetFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AssetFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Asset'> extends True ? CheckSelect<T, Prisma__AssetClient<Asset>, Prisma__AssetClient<AssetGetPayload<T>>> : CheckSelect<T, Prisma__AssetClient<Asset | null >, Prisma__AssetClient<AssetGetPayload<T> | null >>

    /**
     * Find zero or more Assets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assets
     * const assets = await prisma.asset.findMany()
     * 
     * // Get first 10 Assets
     * const assets = await prisma.asset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetWithIdOnly = await prisma.asset.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AssetFindManyArgs>(
      args?: SelectSubset<T, AssetFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Asset>>, PrismaPromise<Array<AssetGetPayload<T>>>>

    /**
     * Create a Asset.
     * @param {AssetCreateArgs} args - Arguments to create a Asset.
     * @example
     * // Create one Asset
     * const Asset = await prisma.asset.create({
     *   data: {
     *     // ... data to create a Asset
     *   }
     * })
     * 
    **/
    create<T extends AssetCreateArgs>(
      args: SelectSubset<T, AssetCreateArgs>
    ): CheckSelect<T, Prisma__AssetClient<Asset>, Prisma__AssetClient<AssetGetPayload<T>>>

    /**
     * Create many Assets.
     *     @param {AssetCreateManyArgs} args - Arguments to create many Assets.
     *     @example
     *     // Create many Assets
     *     const asset = await prisma.asset.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AssetCreateManyArgs>(
      args?: SelectSubset<T, AssetCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Asset.
     * @param {AssetDeleteArgs} args - Arguments to delete one Asset.
     * @example
     * // Delete one Asset
     * const Asset = await prisma.asset.delete({
     *   where: {
     *     // ... filter to delete one Asset
     *   }
     * })
     * 
    **/
    delete<T extends AssetDeleteArgs>(
      args: SelectSubset<T, AssetDeleteArgs>
    ): CheckSelect<T, Prisma__AssetClient<Asset>, Prisma__AssetClient<AssetGetPayload<T>>>

    /**
     * Update one Asset.
     * @param {AssetUpdateArgs} args - Arguments to update one Asset.
     * @example
     * // Update one Asset
     * const asset = await prisma.asset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AssetUpdateArgs>(
      args: SelectSubset<T, AssetUpdateArgs>
    ): CheckSelect<T, Prisma__AssetClient<Asset>, Prisma__AssetClient<AssetGetPayload<T>>>

    /**
     * Delete zero or more Assets.
     * @param {AssetDeleteManyArgs} args - Arguments to filter Assets to delete.
     * @example
     * // Delete a few Assets
     * const { count } = await prisma.asset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AssetDeleteManyArgs>(
      args?: SelectSubset<T, AssetDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AssetUpdateManyArgs>(
      args: SelectSubset<T, AssetUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Asset.
     * @param {AssetUpsertArgs} args - Arguments to update or create a Asset.
     * @example
     * // Update or create a Asset
     * const asset = await prisma.asset.upsert({
     *   create: {
     *     // ... data to create a Asset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Asset we want to update
     *   }
     * })
    **/
    upsert<T extends AssetUpsertArgs>(
      args: SelectSubset<T, AssetUpsertArgs>
    ): CheckSelect<T, Prisma__AssetClient<Asset>, Prisma__AssetClient<AssetGetPayload<T>>>

    /**
     * Count the number of Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCountArgs} args - Arguments to filter Assets to count.
     * @example
     * // Count the number of Assets
     * const count = await prisma.asset.count({
     *   where: {
     *     // ... the filter for the Assets we want to count
     *   }
     * })
    **/
    count<T extends AssetCountArgs>(
      args?: Subset<T, AssetCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs>): PrismaPromise<GetAssetAggregateType<T>>

    /**
     * Group by Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetGroupByArgs['orderBy'] }
        : { orderBy?: AssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Asset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AssetClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    strategy<T extends StrategyArgs = {}>(args?: Subset<T, StrategyArgs>): CheckSelect<T, Prisma__StrategyClient<Strategy | null >, Prisma__StrategyClient<StrategyGetPayload<T> | null >>;

    Verification<T extends VerificationArgs = {}>(args?: Subset<T, VerificationArgs>): CheckSelect<T, Prisma__VerificationClient<Verification | null >, Prisma__VerificationClient<VerificationGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Asset findUnique
   */
  export type AssetFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Asset
     * 
    **/
    select?: AssetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssetInclude | null
    /**
     * Throw an Error if a Asset can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Asset to fetch.
     * 
    **/
    where: AssetWhereUniqueInput
  }


  /**
   * Asset findFirst
   */
  export type AssetFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Asset
     * 
    **/
    select?: AssetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssetInclude | null
    /**
     * Throw an Error if a Asset can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Asset to fetch.
     * 
    **/
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     * 
    **/
    orderBy?: Enumerable<AssetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     * 
    **/
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     * 
    **/
    distinct?: Enumerable<AssetScalarFieldEnum>
  }


  /**
   * Asset findMany
   */
  export type AssetFindManyArgs = {
    /**
     * Select specific fields to fetch from the Asset
     * 
    **/
    select?: AssetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssetInclude | null
    /**
     * Filter, which Assets to fetch.
     * 
    **/
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     * 
    **/
    orderBy?: Enumerable<AssetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assets.
     * 
    **/
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AssetScalarFieldEnum>
  }


  /**
   * Asset create
   */
  export type AssetCreateArgs = {
    /**
     * Select specific fields to fetch from the Asset
     * 
    **/
    select?: AssetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssetInclude | null
    /**
     * The data needed to create a Asset.
     * 
    **/
    data: XOR<AssetCreateInput, AssetUncheckedCreateInput>
  }


  /**
   * Asset createMany
   */
  export type AssetCreateManyArgs = {
    /**
     * The data used to create many Assets.
     * 
    **/
    data: Enumerable<AssetCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Asset update
   */
  export type AssetUpdateArgs = {
    /**
     * Select specific fields to fetch from the Asset
     * 
    **/
    select?: AssetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssetInclude | null
    /**
     * The data needed to update a Asset.
     * 
    **/
    data: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
    /**
     * Choose, which Asset to update.
     * 
    **/
    where: AssetWhereUniqueInput
  }


  /**
   * Asset updateMany
   */
  export type AssetUpdateManyArgs = {
    /**
     * The data used to update Assets.
     * 
    **/
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     * 
    **/
    where?: AssetWhereInput
  }


  /**
   * Asset upsert
   */
  export type AssetUpsertArgs = {
    /**
     * Select specific fields to fetch from the Asset
     * 
    **/
    select?: AssetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssetInclude | null
    /**
     * The filter to search for the Asset to update in case it exists.
     * 
    **/
    where: AssetWhereUniqueInput
    /**
     * In case the Asset found by the `where` argument doesn't exist, create a new Asset with this data.
     * 
    **/
    create: XOR<AssetCreateInput, AssetUncheckedCreateInput>
    /**
     * In case the Asset was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
  }


  /**
   * Asset delete
   */
  export type AssetDeleteArgs = {
    /**
     * Select specific fields to fetch from the Asset
     * 
    **/
    select?: AssetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssetInclude | null
    /**
     * Filter which Asset to delete.
     * 
    **/
    where: AssetWhereUniqueInput
  }


  /**
   * Asset deleteMany
   */
  export type AssetDeleteManyArgs = {
    /**
     * Filter which Assets to delete
     * 
    **/
    where?: AssetWhereInput
  }


  /**
   * Asset without action
   */
  export type AssetArgs = {
    /**
     * Select specific fields to fetch from the Asset
     * 
    **/
    select?: AssetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssetInclude | null
  }



  /**
   * Model Verification
   */


  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _avg: VerificationAvgAggregateOutputType | null
    _sum: VerificationSumAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationAvgAggregateOutputType = {
    projectId: number | null
    verifierId: number | null
    id: number | null
  }

  export type VerificationSumAggregateOutputType = {
    projectId: number | null
    verifierId: number | null
    id: number | null
  }

  export type VerificationMinAggregateOutputType = {
    projectId: number | null
    verifierId: number | null
    id: number | null
  }

  export type VerificationMaxAggregateOutputType = {
    projectId: number | null
    verifierId: number | null
    id: number | null
  }

  export type VerificationCountAggregateOutputType = {
    projectId: number
    verifierId: number
    id: number
    _all: number
  }


  export type VerificationAvgAggregateInputType = {
    projectId?: true
    verifierId?: true
    id?: true
  }

  export type VerificationSumAggregateInputType = {
    projectId?: true
    verifierId?: true
    id?: true
  }

  export type VerificationMinAggregateInputType = {
    projectId?: true
    verifierId?: true
    id?: true
  }

  export type VerificationMaxAggregateInputType = {
    projectId?: true
    verifierId?: true
    id?: true
  }

  export type VerificationCountAggregateInputType = {
    projectId?: true
    verifierId?: true
    id?: true
    _all?: true
  }

  export type VerificationAggregateArgs = {
    /**
     * Filter which Verification to aggregate.
     * 
    **/
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     * 
    **/
    orderBy?: Enumerable<VerificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VerificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VerificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs = {
    where?: VerificationWhereInput
    orderBy?: Enumerable<VerificationOrderByWithAggregationInput>
    by: Array<VerificationScalarFieldEnum>
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _avg?: VerificationAvgAggregateInputType
    _sum?: VerificationSumAggregateInputType
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }


  export type VerificationGroupByOutputType = {
    projectId: number
    verifierId: number
    id: number
    _count: VerificationCountAggregateOutputType | null
    _avg: VerificationAvgAggregateOutputType | null
    _sum: VerificationSumAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect = {
    projectId?: boolean
    verifierId?: boolean
    id?: boolean
    project?: boolean | ProjectArgs
    verifier?: boolean | UserArgs
    assets?: boolean | AssetFindManyArgs
    _count?: boolean | VerificationCountOutputTypeArgs
  }

  export type VerificationInclude = {
    project?: boolean | ProjectArgs
    verifier?: boolean | UserArgs
    assets?: boolean | AssetFindManyArgs
    _count?: boolean | VerificationCountOutputTypeArgs
  }

  export type VerificationGetPayload<
    S extends boolean | null | undefined | VerificationArgs,
    U = keyof S
      > = S extends true
        ? Verification
    : S extends undefined
    ? never
    : S extends VerificationArgs | VerificationFindManyArgs
    ?'include' extends U
    ? Verification  & {
    [P in TrueKeys<S['include']>]:
        P extends 'project' ? ProjectGetPayload<S['include'][P]> :
        P extends 'verifier' ? UserGetPayload<S['include'][P]> :
        P extends 'assets' ? Array < AssetGetPayload<S['include'][P]>>  :
        P extends '_count' ? VerificationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'project' ? ProjectGetPayload<S['select'][P]> :
        P extends 'verifier' ? UserGetPayload<S['select'][P]> :
        P extends 'assets' ? Array < AssetGetPayload<S['select'][P]>>  :
        P extends '_count' ? VerificationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Verification ? Verification[P] : never
  } 
    : Verification
  : Verification


  type VerificationCountArgs = Merge<
    Omit<VerificationFindManyArgs, 'select' | 'include'> & {
      select?: VerificationCountAggregateInputType | true
    }
  >

  export interface VerificationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VerificationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Verification'> extends True ? CheckSelect<T, Prisma__VerificationClient<Verification>, Prisma__VerificationClient<VerificationGetPayload<T>>> : CheckSelect<T, Prisma__VerificationClient<Verification | null >, Prisma__VerificationClient<VerificationGetPayload<T> | null >>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VerificationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Verification'> extends True ? CheckSelect<T, Prisma__VerificationClient<Verification>, Prisma__VerificationClient<VerificationGetPayload<T>>> : CheckSelect<T, Prisma__VerificationClient<Verification | null >, Prisma__VerificationClient<VerificationGetPayload<T> | null >>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const verificationWithProjectIdOnly = await prisma.verification.findMany({ select: { projectId: true } })
     * 
    **/
    findMany<T extends VerificationFindManyArgs>(
      args?: SelectSubset<T, VerificationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Verification>>, PrismaPromise<Array<VerificationGetPayload<T>>>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
    **/
    create<T extends VerificationCreateArgs>(
      args: SelectSubset<T, VerificationCreateArgs>
    ): CheckSelect<T, Prisma__VerificationClient<Verification>, Prisma__VerificationClient<VerificationGetPayload<T>>>

    /**
     * Create many Verifications.
     *     @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     *     @example
     *     // Create many Verifications
     *     const verification = await prisma.verification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationCreateManyArgs>(
      args?: SelectSubset<T, VerificationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
    **/
    delete<T extends VerificationDeleteArgs>(
      args: SelectSubset<T, VerificationDeleteArgs>
    ): CheckSelect<T, Prisma__VerificationClient<Verification>, Prisma__VerificationClient<VerificationGetPayload<T>>>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationUpdateArgs>(
      args: SelectSubset<T, VerificationUpdateArgs>
    ): CheckSelect<T, Prisma__VerificationClient<Verification>, Prisma__VerificationClient<VerificationGetPayload<T>>>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationDeleteManyArgs>(
      args?: SelectSubset<T, VerificationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationUpdateManyArgs>(
      args: SelectSubset<T, VerificationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationUpsertArgs>(
      args: SelectSubset<T, VerificationUpsertArgs>
    ): CheckSelect<T, Prisma__VerificationClient<Verification>, Prisma__VerificationClient<VerificationGetPayload<T>>>

    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VerificationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | null >, Prisma__ProjectClient<ProjectGetPayload<T> | null >>;

    verifier<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    assets<T extends AssetFindManyArgs = {}>(args?: Subset<T, AssetFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Asset>>, PrismaPromise<Array<AssetGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Verification
     * 
    **/
    select?: VerificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerificationInclude | null
    /**
     * Throw an Error if a Verification can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Verification to fetch.
     * 
    **/
    where: VerificationWhereUniqueInput
  }


  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Verification
     * 
    **/
    select?: VerificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerificationInclude | null
    /**
     * Throw an Error if a Verification can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Verification to fetch.
     * 
    **/
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     * 
    **/
    orderBy?: Enumerable<VerificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     * 
    **/
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     * 
    **/
    distinct?: Enumerable<VerificationScalarFieldEnum>
  }


  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Verification
     * 
    **/
    select?: VerificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerificationInclude | null
    /**
     * Filter, which Verifications to fetch.
     * 
    **/
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     * 
    **/
    orderBy?: Enumerable<VerificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     * 
    **/
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VerificationScalarFieldEnum>
  }


  /**
   * Verification create
   */
  export type VerificationCreateArgs = {
    /**
     * Select specific fields to fetch from the Verification
     * 
    **/
    select?: VerificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerificationInclude | null
    /**
     * The data needed to create a Verification.
     * 
    **/
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }


  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs = {
    /**
     * The data used to create many Verifications.
     * 
    **/
    data: Enumerable<VerificationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Verification update
   */
  export type VerificationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Verification
     * 
    **/
    select?: VerificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerificationInclude | null
    /**
     * The data needed to update a Verification.
     * 
    **/
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     * 
    **/
    where: VerificationWhereUniqueInput
  }


  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs = {
    /**
     * The data used to update Verifications.
     * 
    **/
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     * 
    **/
    where?: VerificationWhereInput
  }


  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Verification
     * 
    **/
    select?: VerificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerificationInclude | null
    /**
     * The filter to search for the Verification to update in case it exists.
     * 
    **/
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     * 
    **/
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }


  /**
   * Verification delete
   */
  export type VerificationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Verification
     * 
    **/
    select?: VerificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerificationInclude | null
    /**
     * Filter which Verification to delete.
     * 
    **/
    where: VerificationWhereUniqueInput
  }


  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs = {
    /**
     * Filter which Verifications to delete
     * 
    **/
    where?: VerificationWhereInput
  }


  /**
   * Verification without action
   */
  export type VerificationArgs = {
    /**
     * Select specific fields to fetch from the Verification
     * 
    **/
    select?: VerificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerificationInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    address: 'address'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    submitterId: 'submitterId',
    id: 'id',
    name: 'name',
    slug: 'slug',
    website: 'website',
    twitter: 'twitter',
    discord: 'discord',
    opensea: 'opensea',
    metadata: 'metadata'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const StrategyScalarFieldEnum: {
    id: 'id',
    contract: 'contract',
    name: 'name'
  };

  export type StrategyScalarFieldEnum = (typeof StrategyScalarFieldEnum)[keyof typeof StrategyScalarFieldEnum]


  export const AssetScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    verificationId: 'verificationId',
    strategyId: 'strategyId'
  };

  export type AssetScalarFieldEnum = (typeof AssetScalarFieldEnum)[keyof typeof AssetScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    projectId: 'projectId',
    verifierId: 'verifierId',
    id: 'id'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull'
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    address?: StringFilter | string
    Project?: ProjectListRelationFilter
    Verification?: VerificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    Project?: ProjectOrderByRelationAggregateInput
    Verification?: VerificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    address?: StringWithAggregatesFilter | string
  }

  export type ProjectWhereInput = {
    AND?: Enumerable<ProjectWhereInput>
    OR?: Enumerable<ProjectWhereInput>
    NOT?: Enumerable<ProjectWhereInput>
    submitterId?: IntFilter | number
    id?: IntFilter | number
    name?: StringFilter | string
    slug?: StringFilter | string
    submitter?: XOR<UserRelationFilter, UserWhereInput>
    website?: StringNullableFilter | string | null
    twitter?: StringNullableFilter | string | null
    discord?: StringNullableFilter | string | null
    opensea?: StringNullableFilter | string | null
    metadata?: JsonNullableFilter
    Verification?: VerificationListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    submitterId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    submitter?: UserOrderByWithRelationInput
    website?: SortOrder
    twitter?: SortOrder
    discord?: SortOrder
    opensea?: SortOrder
    metadata?: SortOrder
    Verification?: VerificationOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = {
    id?: number
    slug?: string
  }

  export type ProjectOrderByWithAggregationInput = {
    submitterId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    website?: SortOrder
    twitter?: SortOrder
    discord?: SortOrder
    opensea?: SortOrder
    metadata?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    submitterId?: IntWithAggregatesFilter | number
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    slug?: StringWithAggregatesFilter | string
    website?: StringNullableWithAggregatesFilter | string | null
    twitter?: StringNullableWithAggregatesFilter | string | null
    discord?: StringNullableWithAggregatesFilter | string | null
    opensea?: StringNullableWithAggregatesFilter | string | null
    metadata?: JsonNullableWithAggregatesFilter
  }

  export type StrategyWhereInput = {
    AND?: Enumerable<StrategyWhereInput>
    OR?: Enumerable<StrategyWhereInput>
    NOT?: Enumerable<StrategyWhereInput>
    id?: IntFilter | number
    contract?: StringFilter | string
    name?: StringFilter | string
    Asset?: AssetListRelationFilter
  }

  export type StrategyOrderByWithRelationInput = {
    id?: SortOrder
    contract?: SortOrder
    name?: SortOrder
    Asset?: AssetOrderByRelationAggregateInput
  }

  export type StrategyWhereUniqueInput = {
    id?: number
  }

  export type StrategyOrderByWithAggregationInput = {
    id?: SortOrder
    contract?: SortOrder
    name?: SortOrder
    _count?: StrategyCountOrderByAggregateInput
    _avg?: StrategyAvgOrderByAggregateInput
    _max?: StrategyMaxOrderByAggregateInput
    _min?: StrategyMinOrderByAggregateInput
    _sum?: StrategySumOrderByAggregateInput
  }

  export type StrategyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StrategyScalarWhereWithAggregatesInput>
    OR?: Enumerable<StrategyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StrategyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    contract?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type AssetWhereInput = {
    AND?: Enumerable<AssetWhereInput>
    OR?: Enumerable<AssetWhereInput>
    NOT?: Enumerable<AssetWhereInput>
    id?: IntFilter | number
    quantity?: IntFilter | number
    strategy?: XOR<StrategyRelationFilter, StrategyWhereInput>
    Verification?: XOR<VerificationRelationFilter, VerificationWhereInput> | null
    verificationId?: IntNullableFilter | number | null
    strategyId?: IntFilter | number
  }

  export type AssetOrderByWithRelationInput = {
    id?: SortOrder
    quantity?: SortOrder
    strategy?: StrategyOrderByWithRelationInput
    Verification?: VerificationOrderByWithRelationInput
    verificationId?: SortOrder
    strategyId?: SortOrder
  }

  export type AssetWhereUniqueInput = {
    id?: number
  }

  export type AssetOrderByWithAggregationInput = {
    id?: SortOrder
    quantity?: SortOrder
    verificationId?: SortOrder
    strategyId?: SortOrder
    _count?: AssetCountOrderByAggregateInput
    _avg?: AssetAvgOrderByAggregateInput
    _max?: AssetMaxOrderByAggregateInput
    _min?: AssetMinOrderByAggregateInput
    _sum?: AssetSumOrderByAggregateInput
  }

  export type AssetScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AssetScalarWhereWithAggregatesInput>
    OR?: Enumerable<AssetScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AssetScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    quantity?: IntWithAggregatesFilter | number
    verificationId?: IntNullableWithAggregatesFilter | number | null
    strategyId?: IntWithAggregatesFilter | number
  }

  export type VerificationWhereInput = {
    AND?: Enumerable<VerificationWhereInput>
    OR?: Enumerable<VerificationWhereInput>
    NOT?: Enumerable<VerificationWhereInput>
    projectId?: IntFilter | number
    verifierId?: IntFilter | number
    id?: IntFilter | number
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    verifier?: XOR<UserRelationFilter, UserWhereInput>
    assets?: AssetListRelationFilter
  }

  export type VerificationOrderByWithRelationInput = {
    projectId?: SortOrder
    verifierId?: SortOrder
    id?: SortOrder
    project?: ProjectOrderByWithRelationInput
    verifier?: UserOrderByWithRelationInput
    assets?: AssetOrderByRelationAggregateInput
  }

  export type VerificationWhereUniqueInput = {
    id?: number
  }

  export type VerificationOrderByWithAggregationInput = {
    projectId?: SortOrder
    verifierId?: SortOrder
    id?: SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _avg?: VerificationAvgOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
    _sum?: VerificationSumOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VerificationScalarWhereWithAggregatesInput>
    OR?: Enumerable<VerificationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VerificationScalarWhereWithAggregatesInput>
    projectId?: IntWithAggregatesFilter | number
    verifierId?: IntWithAggregatesFilter | number
    id?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    address: string
    Project?: ProjectCreateNestedManyWithoutSubmitterInput
    Verification?: VerificationCreateNestedManyWithoutVerifierInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    address: string
    Project?: ProjectUncheckedCreateNestedManyWithoutSubmitterInput
    Verification?: VerificationUncheckedCreateNestedManyWithoutVerifierInput
  }

  export type UserUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    Project?: ProjectUpdateManyWithoutSubmitterInput
    Verification?: VerificationUpdateManyWithoutVerifierInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    Project?: ProjectUncheckedUpdateManyWithoutSubmitterInput
    Verification?: VerificationUncheckedUpdateManyWithoutVerifierInput
  }

  export type UserCreateManyInput = {
    id?: number
    address: string
  }

  export type UserUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectCreateInput = {
    name: string
    slug: string
    submitter: UserCreateNestedOneWithoutProjectInput
    website?: string | null
    twitter?: string | null
    discord?: string | null
    opensea?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    Verification?: VerificationCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    submitterId: number
    id?: number
    name: string
    slug: string
    website?: string | null
    twitter?: string | null
    discord?: string | null
    opensea?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    Verification?: VerificationUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    submitter?: UserUpdateOneRequiredWithoutProjectInput
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    opensea?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    Verification?: VerificationUpdateManyWithoutProjectInput
  }

  export type ProjectUncheckedUpdateInput = {
    submitterId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    opensea?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    Verification?: VerificationUncheckedUpdateManyWithoutProjectInput
  }

  export type ProjectCreateManyInput = {
    submitterId: number
    id?: number
    name: string
    slug: string
    website?: string | null
    twitter?: string | null
    discord?: string | null
    opensea?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    opensea?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProjectUncheckedUpdateManyInput = {
    submitterId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    opensea?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StrategyCreateInput = {
    contract: string
    name: string
    Asset?: AssetCreateNestedManyWithoutStrategyInput
  }

  export type StrategyUncheckedCreateInput = {
    id?: number
    contract: string
    name: string
    Asset?: AssetUncheckedCreateNestedManyWithoutStrategyInput
  }

  export type StrategyUpdateInput = {
    contract?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Asset?: AssetUpdateManyWithoutStrategyInput
  }

  export type StrategyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contract?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Asset?: AssetUncheckedUpdateManyWithoutStrategyInput
  }

  export type StrategyCreateManyInput = {
    id?: number
    contract: string
    name: string
  }

  export type StrategyUpdateManyMutationInput = {
    contract?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StrategyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contract?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AssetCreateInput = {
    quantity: number
    strategy: StrategyCreateNestedOneWithoutAssetInput
    Verification?: VerificationCreateNestedOneWithoutAssetsInput
  }

  export type AssetUncheckedCreateInput = {
    id?: number
    quantity: number
    verificationId?: number | null
    strategyId: number
  }

  export type AssetUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    strategy?: StrategyUpdateOneRequiredWithoutAssetInput
    Verification?: VerificationUpdateOneWithoutAssetsInput
  }

  export type AssetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    verificationId?: NullableIntFieldUpdateOperationsInput | number | null
    strategyId?: IntFieldUpdateOperationsInput | number
  }

  export type AssetCreateManyInput = {
    id?: number
    quantity: number
    verificationId?: number | null
    strategyId: number
  }

  export type AssetUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type AssetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    verificationId?: NullableIntFieldUpdateOperationsInput | number | null
    strategyId?: IntFieldUpdateOperationsInput | number
  }

  export type VerificationCreateInput = {
    project: ProjectCreateNestedOneWithoutVerificationInput
    verifier: UserCreateNestedOneWithoutVerificationInput
    assets?: AssetCreateNestedManyWithoutVerificationInput
  }

  export type VerificationUncheckedCreateInput = {
    projectId: number
    verifierId: number
    id?: number
    assets?: AssetUncheckedCreateNestedManyWithoutVerificationInput
  }

  export type VerificationUpdateInput = {
    project?: ProjectUpdateOneRequiredWithoutVerificationInput
    verifier?: UserUpdateOneRequiredWithoutVerificationInput
    assets?: AssetUpdateManyWithoutVerificationInput
  }

  export type VerificationUncheckedUpdateInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    verifierId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
    assets?: AssetUncheckedUpdateManyWithoutVerificationInput
  }

  export type VerificationCreateManyInput = {
    projectId: number
    verifierId: number
    id?: number
  }

  export type VerificationUpdateManyMutationInput = {

  }

  export type VerificationUncheckedUpdateManyInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    verifierId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type VerificationListRelationFilter = {
    every?: VerificationWhereInput
    some?: VerificationWhereInput
    none?: VerificationWhereInput
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VerificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type ProjectCountOrderByAggregateInput = {
    submitterId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    website?: SortOrder
    twitter?: SortOrder
    discord?: SortOrder
    opensea?: SortOrder
    metadata?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    submitterId?: SortOrder
    id?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    submitterId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    website?: SortOrder
    twitter?: SortOrder
    discord?: SortOrder
    opensea?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    submitterId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    website?: SortOrder
    twitter?: SortOrder
    discord?: SortOrder
    opensea?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    submitterId?: SortOrder
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type AssetListRelationFilter = {
    every?: AssetWhereInput
    some?: AssetWhereInput
    none?: AssetWhereInput
  }

  export type AssetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StrategyCountOrderByAggregateInput = {
    id?: SortOrder
    contract?: SortOrder
    name?: SortOrder
  }

  export type StrategyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StrategyMaxOrderByAggregateInput = {
    id?: SortOrder
    contract?: SortOrder
    name?: SortOrder
  }

  export type StrategyMinOrderByAggregateInput = {
    id?: SortOrder
    contract?: SortOrder
    name?: SortOrder
  }

  export type StrategySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StrategyRelationFilter = {
    is?: StrategyWhereInput
    isNot?: StrategyWhereInput
  }

  export type VerificationRelationFilter = {
    is?: VerificationWhereInput | null
    isNot?: VerificationWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type AssetCountOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    verificationId?: SortOrder
    strategyId?: SortOrder
  }

  export type AssetAvgOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    verificationId?: SortOrder
    strategyId?: SortOrder
  }

  export type AssetMaxOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    verificationId?: SortOrder
    strategyId?: SortOrder
  }

  export type AssetMinOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    verificationId?: SortOrder
    strategyId?: SortOrder
  }

  export type AssetSumOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    verificationId?: SortOrder
    strategyId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type VerificationCountOrderByAggregateInput = {
    projectId?: SortOrder
    verifierId?: SortOrder
    id?: SortOrder
  }

  export type VerificationAvgOrderByAggregateInput = {
    projectId?: SortOrder
    verifierId?: SortOrder
    id?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    projectId?: SortOrder
    verifierId?: SortOrder
    id?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    projectId?: SortOrder
    verifierId?: SortOrder
    id?: SortOrder
  }

  export type VerificationSumOrderByAggregateInput = {
    projectId?: SortOrder
    verifierId?: SortOrder
    id?: SortOrder
  }

  export type ProjectCreateNestedManyWithoutSubmitterInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutSubmitterInput>, Enumerable<ProjectUncheckedCreateWithoutSubmitterInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutSubmitterInput>
    createMany?: ProjectCreateManySubmitterInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type VerificationCreateNestedManyWithoutVerifierInput = {
    create?: XOR<Enumerable<VerificationCreateWithoutVerifierInput>, Enumerable<VerificationUncheckedCreateWithoutVerifierInput>>
    connectOrCreate?: Enumerable<VerificationCreateOrConnectWithoutVerifierInput>
    createMany?: VerificationCreateManyVerifierInputEnvelope
    connect?: Enumerable<VerificationWhereUniqueInput>
  }

  export type ProjectUncheckedCreateNestedManyWithoutSubmitterInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutSubmitterInput>, Enumerable<ProjectUncheckedCreateWithoutSubmitterInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutSubmitterInput>
    createMany?: ProjectCreateManySubmitterInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type VerificationUncheckedCreateNestedManyWithoutVerifierInput = {
    create?: XOR<Enumerable<VerificationCreateWithoutVerifierInput>, Enumerable<VerificationUncheckedCreateWithoutVerifierInput>>
    connectOrCreate?: Enumerable<VerificationCreateOrConnectWithoutVerifierInput>
    createMany?: VerificationCreateManyVerifierInputEnvelope
    connect?: Enumerable<VerificationWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ProjectUpdateManyWithoutSubmitterInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutSubmitterInput>, Enumerable<ProjectUncheckedCreateWithoutSubmitterInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutSubmitterInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutSubmitterInput>
    createMany?: ProjectCreateManySubmitterInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutSubmitterInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutSubmitterInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type VerificationUpdateManyWithoutVerifierInput = {
    create?: XOR<Enumerable<VerificationCreateWithoutVerifierInput>, Enumerable<VerificationUncheckedCreateWithoutVerifierInput>>
    connectOrCreate?: Enumerable<VerificationCreateOrConnectWithoutVerifierInput>
    upsert?: Enumerable<VerificationUpsertWithWhereUniqueWithoutVerifierInput>
    createMany?: VerificationCreateManyVerifierInputEnvelope
    set?: Enumerable<VerificationWhereUniqueInput>
    disconnect?: Enumerable<VerificationWhereUniqueInput>
    delete?: Enumerable<VerificationWhereUniqueInput>
    connect?: Enumerable<VerificationWhereUniqueInput>
    update?: Enumerable<VerificationUpdateWithWhereUniqueWithoutVerifierInput>
    updateMany?: Enumerable<VerificationUpdateManyWithWhereWithoutVerifierInput>
    deleteMany?: Enumerable<VerificationScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUncheckedUpdateManyWithoutSubmitterInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutSubmitterInput>, Enumerable<ProjectUncheckedCreateWithoutSubmitterInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutSubmitterInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutSubmitterInput>
    createMany?: ProjectCreateManySubmitterInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutSubmitterInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutSubmitterInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type VerificationUncheckedUpdateManyWithoutVerifierInput = {
    create?: XOR<Enumerable<VerificationCreateWithoutVerifierInput>, Enumerable<VerificationUncheckedCreateWithoutVerifierInput>>
    connectOrCreate?: Enumerable<VerificationCreateOrConnectWithoutVerifierInput>
    upsert?: Enumerable<VerificationUpsertWithWhereUniqueWithoutVerifierInput>
    createMany?: VerificationCreateManyVerifierInputEnvelope
    set?: Enumerable<VerificationWhereUniqueInput>
    disconnect?: Enumerable<VerificationWhereUniqueInput>
    delete?: Enumerable<VerificationWhereUniqueInput>
    connect?: Enumerable<VerificationWhereUniqueInput>
    update?: Enumerable<VerificationUpdateWithWhereUniqueWithoutVerifierInput>
    updateMany?: Enumerable<VerificationUpdateManyWithWhereWithoutVerifierInput>
    deleteMany?: Enumerable<VerificationScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutProjectInput = {
    create?: XOR<UserCreateWithoutProjectInput, UserUncheckedCreateWithoutProjectInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectInput
    connect?: UserWhereUniqueInput
  }

  export type VerificationCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<VerificationCreateWithoutProjectInput>, Enumerable<VerificationUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<VerificationCreateOrConnectWithoutProjectInput>
    createMany?: VerificationCreateManyProjectInputEnvelope
    connect?: Enumerable<VerificationWhereUniqueInput>
  }

  export type VerificationUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<VerificationCreateWithoutProjectInput>, Enumerable<VerificationUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<VerificationCreateOrConnectWithoutProjectInput>
    createMany?: VerificationCreateManyProjectInputEnvelope
    connect?: Enumerable<VerificationWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutProjectInput = {
    create?: XOR<UserCreateWithoutProjectInput, UserUncheckedCreateWithoutProjectInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectInput
    upsert?: UserUpsertWithoutProjectInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProjectInput, UserUncheckedUpdateWithoutProjectInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type VerificationUpdateManyWithoutProjectInput = {
    create?: XOR<Enumerable<VerificationCreateWithoutProjectInput>, Enumerable<VerificationUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<VerificationCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<VerificationUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: VerificationCreateManyProjectInputEnvelope
    set?: Enumerable<VerificationWhereUniqueInput>
    disconnect?: Enumerable<VerificationWhereUniqueInput>
    delete?: Enumerable<VerificationWhereUniqueInput>
    connect?: Enumerable<VerificationWhereUniqueInput>
    update?: Enumerable<VerificationUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<VerificationUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<VerificationScalarWhereInput>
  }

  export type VerificationUncheckedUpdateManyWithoutProjectInput = {
    create?: XOR<Enumerable<VerificationCreateWithoutProjectInput>, Enumerable<VerificationUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<VerificationCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<VerificationUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: VerificationCreateManyProjectInputEnvelope
    set?: Enumerable<VerificationWhereUniqueInput>
    disconnect?: Enumerable<VerificationWhereUniqueInput>
    delete?: Enumerable<VerificationWhereUniqueInput>
    connect?: Enumerable<VerificationWhereUniqueInput>
    update?: Enumerable<VerificationUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<VerificationUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<VerificationScalarWhereInput>
  }

  export type AssetCreateNestedManyWithoutStrategyInput = {
    create?: XOR<Enumerable<AssetCreateWithoutStrategyInput>, Enumerable<AssetUncheckedCreateWithoutStrategyInput>>
    connectOrCreate?: Enumerable<AssetCreateOrConnectWithoutStrategyInput>
    createMany?: AssetCreateManyStrategyInputEnvelope
    connect?: Enumerable<AssetWhereUniqueInput>
  }

  export type AssetUncheckedCreateNestedManyWithoutStrategyInput = {
    create?: XOR<Enumerable<AssetCreateWithoutStrategyInput>, Enumerable<AssetUncheckedCreateWithoutStrategyInput>>
    connectOrCreate?: Enumerable<AssetCreateOrConnectWithoutStrategyInput>
    createMany?: AssetCreateManyStrategyInputEnvelope
    connect?: Enumerable<AssetWhereUniqueInput>
  }

  export type AssetUpdateManyWithoutStrategyInput = {
    create?: XOR<Enumerable<AssetCreateWithoutStrategyInput>, Enumerable<AssetUncheckedCreateWithoutStrategyInput>>
    connectOrCreate?: Enumerable<AssetCreateOrConnectWithoutStrategyInput>
    upsert?: Enumerable<AssetUpsertWithWhereUniqueWithoutStrategyInput>
    createMany?: AssetCreateManyStrategyInputEnvelope
    set?: Enumerable<AssetWhereUniqueInput>
    disconnect?: Enumerable<AssetWhereUniqueInput>
    delete?: Enumerable<AssetWhereUniqueInput>
    connect?: Enumerable<AssetWhereUniqueInput>
    update?: Enumerable<AssetUpdateWithWhereUniqueWithoutStrategyInput>
    updateMany?: Enumerable<AssetUpdateManyWithWhereWithoutStrategyInput>
    deleteMany?: Enumerable<AssetScalarWhereInput>
  }

  export type AssetUncheckedUpdateManyWithoutStrategyInput = {
    create?: XOR<Enumerable<AssetCreateWithoutStrategyInput>, Enumerable<AssetUncheckedCreateWithoutStrategyInput>>
    connectOrCreate?: Enumerable<AssetCreateOrConnectWithoutStrategyInput>
    upsert?: Enumerable<AssetUpsertWithWhereUniqueWithoutStrategyInput>
    createMany?: AssetCreateManyStrategyInputEnvelope
    set?: Enumerable<AssetWhereUniqueInput>
    disconnect?: Enumerable<AssetWhereUniqueInput>
    delete?: Enumerable<AssetWhereUniqueInput>
    connect?: Enumerable<AssetWhereUniqueInput>
    update?: Enumerable<AssetUpdateWithWhereUniqueWithoutStrategyInput>
    updateMany?: Enumerable<AssetUpdateManyWithWhereWithoutStrategyInput>
    deleteMany?: Enumerable<AssetScalarWhereInput>
  }

  export type StrategyCreateNestedOneWithoutAssetInput = {
    create?: XOR<StrategyCreateWithoutAssetInput, StrategyUncheckedCreateWithoutAssetInput>
    connectOrCreate?: StrategyCreateOrConnectWithoutAssetInput
    connect?: StrategyWhereUniqueInput
  }

  export type VerificationCreateNestedOneWithoutAssetsInput = {
    create?: XOR<VerificationCreateWithoutAssetsInput, VerificationUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: VerificationCreateOrConnectWithoutAssetsInput
    connect?: VerificationWhereUniqueInput
  }

  export type StrategyUpdateOneRequiredWithoutAssetInput = {
    create?: XOR<StrategyCreateWithoutAssetInput, StrategyUncheckedCreateWithoutAssetInput>
    connectOrCreate?: StrategyCreateOrConnectWithoutAssetInput
    upsert?: StrategyUpsertWithoutAssetInput
    connect?: StrategyWhereUniqueInput
    update?: XOR<StrategyUpdateWithoutAssetInput, StrategyUncheckedUpdateWithoutAssetInput>
  }

  export type VerificationUpdateOneWithoutAssetsInput = {
    create?: XOR<VerificationCreateWithoutAssetsInput, VerificationUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: VerificationCreateOrConnectWithoutAssetsInput
    upsert?: VerificationUpsertWithoutAssetsInput
    disconnect?: boolean
    delete?: boolean
    connect?: VerificationWhereUniqueInput
    update?: XOR<VerificationUpdateWithoutAssetsInput, VerificationUncheckedUpdateWithoutAssetsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectCreateNestedOneWithoutVerificationInput = {
    create?: XOR<ProjectCreateWithoutVerificationInput, ProjectUncheckedCreateWithoutVerificationInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutVerificationInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutVerificationInput = {
    create?: XOR<UserCreateWithoutVerificationInput, UserUncheckedCreateWithoutVerificationInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerificationInput
    connect?: UserWhereUniqueInput
  }

  export type AssetCreateNestedManyWithoutVerificationInput = {
    create?: XOR<Enumerable<AssetCreateWithoutVerificationInput>, Enumerable<AssetUncheckedCreateWithoutVerificationInput>>
    connectOrCreate?: Enumerable<AssetCreateOrConnectWithoutVerificationInput>
    createMany?: AssetCreateManyVerificationInputEnvelope
    connect?: Enumerable<AssetWhereUniqueInput>
  }

  export type AssetUncheckedCreateNestedManyWithoutVerificationInput = {
    create?: XOR<Enumerable<AssetCreateWithoutVerificationInput>, Enumerable<AssetUncheckedCreateWithoutVerificationInput>>
    connectOrCreate?: Enumerable<AssetCreateOrConnectWithoutVerificationInput>
    createMany?: AssetCreateManyVerificationInputEnvelope
    connect?: Enumerable<AssetWhereUniqueInput>
  }

  export type ProjectUpdateOneRequiredWithoutVerificationInput = {
    create?: XOR<ProjectCreateWithoutVerificationInput, ProjectUncheckedCreateWithoutVerificationInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutVerificationInput
    upsert?: ProjectUpsertWithoutVerificationInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutVerificationInput, ProjectUncheckedUpdateWithoutVerificationInput>
  }

  export type UserUpdateOneRequiredWithoutVerificationInput = {
    create?: XOR<UserCreateWithoutVerificationInput, UserUncheckedCreateWithoutVerificationInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerificationInput
    upsert?: UserUpsertWithoutVerificationInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutVerificationInput, UserUncheckedUpdateWithoutVerificationInput>
  }

  export type AssetUpdateManyWithoutVerificationInput = {
    create?: XOR<Enumerable<AssetCreateWithoutVerificationInput>, Enumerable<AssetUncheckedCreateWithoutVerificationInput>>
    connectOrCreate?: Enumerable<AssetCreateOrConnectWithoutVerificationInput>
    upsert?: Enumerable<AssetUpsertWithWhereUniqueWithoutVerificationInput>
    createMany?: AssetCreateManyVerificationInputEnvelope
    set?: Enumerable<AssetWhereUniqueInput>
    disconnect?: Enumerable<AssetWhereUniqueInput>
    delete?: Enumerable<AssetWhereUniqueInput>
    connect?: Enumerable<AssetWhereUniqueInput>
    update?: Enumerable<AssetUpdateWithWhereUniqueWithoutVerificationInput>
    updateMany?: Enumerable<AssetUpdateManyWithWhereWithoutVerificationInput>
    deleteMany?: Enumerable<AssetScalarWhereInput>
  }

  export type AssetUncheckedUpdateManyWithoutVerificationInput = {
    create?: XOR<Enumerable<AssetCreateWithoutVerificationInput>, Enumerable<AssetUncheckedCreateWithoutVerificationInput>>
    connectOrCreate?: Enumerable<AssetCreateOrConnectWithoutVerificationInput>
    upsert?: Enumerable<AssetUpsertWithWhereUniqueWithoutVerificationInput>
    createMany?: AssetCreateManyVerificationInputEnvelope
    set?: Enumerable<AssetWhereUniqueInput>
    disconnect?: Enumerable<AssetWhereUniqueInput>
    delete?: Enumerable<AssetWhereUniqueInput>
    connect?: Enumerable<AssetWhereUniqueInput>
    update?: Enumerable<AssetUpdateWithWhereUniqueWithoutVerificationInput>
    updateMany?: Enumerable<AssetUpdateManyWithWhereWithoutVerificationInput>
    deleteMany?: Enumerable<AssetScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type ProjectCreateWithoutSubmitterInput = {
    name: string
    slug: string
    website?: string | null
    twitter?: string | null
    discord?: string | null
    opensea?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    Verification?: VerificationCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutSubmitterInput = {
    id?: number
    name: string
    slug: string
    website?: string | null
    twitter?: string | null
    discord?: string | null
    opensea?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    Verification?: VerificationUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutSubmitterInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutSubmitterInput, ProjectUncheckedCreateWithoutSubmitterInput>
  }

  export type ProjectCreateManySubmitterInputEnvelope = {
    data: Enumerable<ProjectCreateManySubmitterInput>
    skipDuplicates?: boolean
  }

  export type VerificationCreateWithoutVerifierInput = {
    project: ProjectCreateNestedOneWithoutVerificationInput
    assets?: AssetCreateNestedManyWithoutVerificationInput
  }

  export type VerificationUncheckedCreateWithoutVerifierInput = {
    projectId: number
    id?: number
    assets?: AssetUncheckedCreateNestedManyWithoutVerificationInput
  }

  export type VerificationCreateOrConnectWithoutVerifierInput = {
    where: VerificationWhereUniqueInput
    create: XOR<VerificationCreateWithoutVerifierInput, VerificationUncheckedCreateWithoutVerifierInput>
  }

  export type VerificationCreateManyVerifierInputEnvelope = {
    data: Enumerable<VerificationCreateManyVerifierInput>
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithWhereUniqueWithoutSubmitterInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutSubmitterInput, ProjectUncheckedUpdateWithoutSubmitterInput>
    create: XOR<ProjectCreateWithoutSubmitterInput, ProjectUncheckedCreateWithoutSubmitterInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutSubmitterInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutSubmitterInput, ProjectUncheckedUpdateWithoutSubmitterInput>
  }

  export type ProjectUpdateManyWithWhereWithoutSubmitterInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: Enumerable<ProjectScalarWhereInput>
    OR?: Enumerable<ProjectScalarWhereInput>
    NOT?: Enumerable<ProjectScalarWhereInput>
    submitterId?: IntFilter | number
    id?: IntFilter | number
    name?: StringFilter | string
    slug?: StringFilter | string
    website?: StringNullableFilter | string | null
    twitter?: StringNullableFilter | string | null
    discord?: StringNullableFilter | string | null
    opensea?: StringNullableFilter | string | null
    metadata?: JsonNullableFilter
  }

  export type VerificationUpsertWithWhereUniqueWithoutVerifierInput = {
    where: VerificationWhereUniqueInput
    update: XOR<VerificationUpdateWithoutVerifierInput, VerificationUncheckedUpdateWithoutVerifierInput>
    create: XOR<VerificationCreateWithoutVerifierInput, VerificationUncheckedCreateWithoutVerifierInput>
  }

  export type VerificationUpdateWithWhereUniqueWithoutVerifierInput = {
    where: VerificationWhereUniqueInput
    data: XOR<VerificationUpdateWithoutVerifierInput, VerificationUncheckedUpdateWithoutVerifierInput>
  }

  export type VerificationUpdateManyWithWhereWithoutVerifierInput = {
    where: VerificationScalarWhereInput
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyWithoutVerificationInput>
  }

  export type VerificationScalarWhereInput = {
    AND?: Enumerable<VerificationScalarWhereInput>
    OR?: Enumerable<VerificationScalarWhereInput>
    NOT?: Enumerable<VerificationScalarWhereInput>
    projectId?: IntFilter | number
    verifierId?: IntFilter | number
    id?: IntFilter | number
  }

  export type UserCreateWithoutProjectInput = {
    address: string
    Verification?: VerificationCreateNestedManyWithoutVerifierInput
  }

  export type UserUncheckedCreateWithoutProjectInput = {
    id?: number
    address: string
    Verification?: VerificationUncheckedCreateNestedManyWithoutVerifierInput
  }

  export type UserCreateOrConnectWithoutProjectInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectInput, UserUncheckedCreateWithoutProjectInput>
  }

  export type VerificationCreateWithoutProjectInput = {
    verifier: UserCreateNestedOneWithoutVerificationInput
    assets?: AssetCreateNestedManyWithoutVerificationInput
  }

  export type VerificationUncheckedCreateWithoutProjectInput = {
    verifierId: number
    id?: number
    assets?: AssetUncheckedCreateNestedManyWithoutVerificationInput
  }

  export type VerificationCreateOrConnectWithoutProjectInput = {
    where: VerificationWhereUniqueInput
    create: XOR<VerificationCreateWithoutProjectInput, VerificationUncheckedCreateWithoutProjectInput>
  }

  export type VerificationCreateManyProjectInputEnvelope = {
    data: Enumerable<VerificationCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProjectInput = {
    update: XOR<UserUpdateWithoutProjectInput, UserUncheckedUpdateWithoutProjectInput>
    create: XOR<UserCreateWithoutProjectInput, UserUncheckedCreateWithoutProjectInput>
  }

  export type UserUpdateWithoutProjectInput = {
    address?: StringFieldUpdateOperationsInput | string
    Verification?: VerificationUpdateManyWithoutVerifierInput
  }

  export type UserUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    Verification?: VerificationUncheckedUpdateManyWithoutVerifierInput
  }

  export type VerificationUpsertWithWhereUniqueWithoutProjectInput = {
    where: VerificationWhereUniqueInput
    update: XOR<VerificationUpdateWithoutProjectInput, VerificationUncheckedUpdateWithoutProjectInput>
    create: XOR<VerificationCreateWithoutProjectInput, VerificationUncheckedCreateWithoutProjectInput>
  }

  export type VerificationUpdateWithWhereUniqueWithoutProjectInput = {
    where: VerificationWhereUniqueInput
    data: XOR<VerificationUpdateWithoutProjectInput, VerificationUncheckedUpdateWithoutProjectInput>
  }

  export type VerificationUpdateManyWithWhereWithoutProjectInput = {
    where: VerificationScalarWhereInput
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyWithoutVerificationInput>
  }

  export type AssetCreateWithoutStrategyInput = {
    quantity: number
    Verification?: VerificationCreateNestedOneWithoutAssetsInput
  }

  export type AssetUncheckedCreateWithoutStrategyInput = {
    id?: number
    quantity: number
    verificationId?: number | null
  }

  export type AssetCreateOrConnectWithoutStrategyInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutStrategyInput, AssetUncheckedCreateWithoutStrategyInput>
  }

  export type AssetCreateManyStrategyInputEnvelope = {
    data: Enumerable<AssetCreateManyStrategyInput>
    skipDuplicates?: boolean
  }

  export type AssetUpsertWithWhereUniqueWithoutStrategyInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutStrategyInput, AssetUncheckedUpdateWithoutStrategyInput>
    create: XOR<AssetCreateWithoutStrategyInput, AssetUncheckedCreateWithoutStrategyInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutStrategyInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutStrategyInput, AssetUncheckedUpdateWithoutStrategyInput>
  }

  export type AssetUpdateManyWithWhereWithoutStrategyInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutAssetInput>
  }

  export type AssetScalarWhereInput = {
    AND?: Enumerable<AssetScalarWhereInput>
    OR?: Enumerable<AssetScalarWhereInput>
    NOT?: Enumerable<AssetScalarWhereInput>
    id?: IntFilter | number
    quantity?: IntFilter | number
    verificationId?: IntNullableFilter | number | null
    strategyId?: IntFilter | number
  }

  export type StrategyCreateWithoutAssetInput = {
    contract: string
    name: string
  }

  export type StrategyUncheckedCreateWithoutAssetInput = {
    id?: number
    contract: string
    name: string
  }

  export type StrategyCreateOrConnectWithoutAssetInput = {
    where: StrategyWhereUniqueInput
    create: XOR<StrategyCreateWithoutAssetInput, StrategyUncheckedCreateWithoutAssetInput>
  }

  export type VerificationCreateWithoutAssetsInput = {
    project: ProjectCreateNestedOneWithoutVerificationInput
    verifier: UserCreateNestedOneWithoutVerificationInput
  }

  export type VerificationUncheckedCreateWithoutAssetsInput = {
    projectId: number
    verifierId: number
    id?: number
  }

  export type VerificationCreateOrConnectWithoutAssetsInput = {
    where: VerificationWhereUniqueInput
    create: XOR<VerificationCreateWithoutAssetsInput, VerificationUncheckedCreateWithoutAssetsInput>
  }

  export type StrategyUpsertWithoutAssetInput = {
    update: XOR<StrategyUpdateWithoutAssetInput, StrategyUncheckedUpdateWithoutAssetInput>
    create: XOR<StrategyCreateWithoutAssetInput, StrategyUncheckedCreateWithoutAssetInput>
  }

  export type StrategyUpdateWithoutAssetInput = {
    contract?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StrategyUncheckedUpdateWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    contract?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationUpsertWithoutAssetsInput = {
    update: XOR<VerificationUpdateWithoutAssetsInput, VerificationUncheckedUpdateWithoutAssetsInput>
    create: XOR<VerificationCreateWithoutAssetsInput, VerificationUncheckedCreateWithoutAssetsInput>
  }

  export type VerificationUpdateWithoutAssetsInput = {
    project?: ProjectUpdateOneRequiredWithoutVerificationInput
    verifier?: UserUpdateOneRequiredWithoutVerificationInput
  }

  export type VerificationUncheckedUpdateWithoutAssetsInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    verifierId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type ProjectCreateWithoutVerificationInput = {
    name: string
    slug: string
    submitter: UserCreateNestedOneWithoutProjectInput
    website?: string | null
    twitter?: string | null
    discord?: string | null
    opensea?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProjectUncheckedCreateWithoutVerificationInput = {
    submitterId: number
    id?: number
    name: string
    slug: string
    website?: string | null
    twitter?: string | null
    discord?: string | null
    opensea?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProjectCreateOrConnectWithoutVerificationInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutVerificationInput, ProjectUncheckedCreateWithoutVerificationInput>
  }

  export type UserCreateWithoutVerificationInput = {
    address: string
    Project?: ProjectCreateNestedManyWithoutSubmitterInput
  }

  export type UserUncheckedCreateWithoutVerificationInput = {
    id?: number
    address: string
    Project?: ProjectUncheckedCreateNestedManyWithoutSubmitterInput
  }

  export type UserCreateOrConnectWithoutVerificationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVerificationInput, UserUncheckedCreateWithoutVerificationInput>
  }

  export type AssetCreateWithoutVerificationInput = {
    quantity: number
    strategy: StrategyCreateNestedOneWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutVerificationInput = {
    id?: number
    quantity: number
    strategyId: number
  }

  export type AssetCreateOrConnectWithoutVerificationInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutVerificationInput, AssetUncheckedCreateWithoutVerificationInput>
  }

  export type AssetCreateManyVerificationInputEnvelope = {
    data: Enumerable<AssetCreateManyVerificationInput>
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutVerificationInput = {
    update: XOR<ProjectUpdateWithoutVerificationInput, ProjectUncheckedUpdateWithoutVerificationInput>
    create: XOR<ProjectCreateWithoutVerificationInput, ProjectUncheckedCreateWithoutVerificationInput>
  }

  export type ProjectUpdateWithoutVerificationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    submitter?: UserUpdateOneRequiredWithoutProjectInput
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    opensea?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProjectUncheckedUpdateWithoutVerificationInput = {
    submitterId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    opensea?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpsertWithoutVerificationInput = {
    update: XOR<UserUpdateWithoutVerificationInput, UserUncheckedUpdateWithoutVerificationInput>
    create: XOR<UserCreateWithoutVerificationInput, UserUncheckedCreateWithoutVerificationInput>
  }

  export type UserUpdateWithoutVerificationInput = {
    address?: StringFieldUpdateOperationsInput | string
    Project?: ProjectUpdateManyWithoutSubmitterInput
  }

  export type UserUncheckedUpdateWithoutVerificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    Project?: ProjectUncheckedUpdateManyWithoutSubmitterInput
  }

  export type AssetUpsertWithWhereUniqueWithoutVerificationInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutVerificationInput, AssetUncheckedUpdateWithoutVerificationInput>
    create: XOR<AssetCreateWithoutVerificationInput, AssetUncheckedCreateWithoutVerificationInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutVerificationInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutVerificationInput, AssetUncheckedUpdateWithoutVerificationInput>
  }

  export type AssetUpdateManyWithWhereWithoutVerificationInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutAssetsInput>
  }

  export type ProjectCreateManySubmitterInput = {
    id?: number
    name: string
    slug: string
    website?: string | null
    twitter?: string | null
    discord?: string | null
    opensea?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VerificationCreateManyVerifierInput = {
    projectId: number
    id?: number
  }

  export type ProjectUpdateWithoutSubmitterInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    opensea?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    Verification?: VerificationUpdateManyWithoutProjectInput
  }

  export type ProjectUncheckedUpdateWithoutSubmitterInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    opensea?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    Verification?: VerificationUncheckedUpdateManyWithoutProjectInput
  }

  export type ProjectUncheckedUpdateManyWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    opensea?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VerificationUpdateWithoutVerifierInput = {
    project?: ProjectUpdateOneRequiredWithoutVerificationInput
    assets?: AssetUpdateManyWithoutVerificationInput
  }

  export type VerificationUncheckedUpdateWithoutVerifierInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
    assets?: AssetUncheckedUpdateManyWithoutVerificationInput
  }

  export type VerificationUncheckedUpdateManyWithoutVerificationInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type VerificationCreateManyProjectInput = {
    verifierId: number
    id?: number
  }

  export type VerificationUpdateWithoutProjectInput = {
    verifier?: UserUpdateOneRequiredWithoutVerificationInput
    assets?: AssetUpdateManyWithoutVerificationInput
  }

  export type VerificationUncheckedUpdateWithoutProjectInput = {
    verifierId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
    assets?: AssetUncheckedUpdateManyWithoutVerificationInput
  }

  export type AssetCreateManyStrategyInput = {
    id?: number
    quantity: number
    verificationId?: number | null
  }

  export type AssetUpdateWithoutStrategyInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    Verification?: VerificationUpdateOneWithoutAssetsInput
  }

  export type AssetUncheckedUpdateWithoutStrategyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    verificationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssetUncheckedUpdateManyWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    verificationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssetCreateManyVerificationInput = {
    id?: number
    quantity: number
    strategyId: number
  }

  export type AssetUpdateWithoutVerificationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    strategy?: StrategyUpdateOneRequiredWithoutAssetInput
  }

  export type AssetUncheckedUpdateWithoutVerificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    strategyId?: IntFieldUpdateOperationsInput | number
  }

  export type AssetUncheckedUpdateManyWithoutAssetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    strategyId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}